

import utils.FileManager;
import org.apache.commons.io.FileUtils;

import javax.swing.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ExecutionException;


class SubtitlesCollection {
    public List<String> canBeAnnotated;   // List of subtitles files that we can process
    public List<String> wasAnnotated;     // List of subtitles previously generated by us

    public SubtitlesCollection() {
        canBeAnnotated = new ArrayList<String>();
        wasAnnotated = new ArrayList<String>();
    }
    public boolean isEmpty() { return canBeAnnotated.size() == 0 && wasAnnotated.size() == 0; }
}

class WorkerSubFinder extends SwingWorker<SubtitlesCollection, Object> {

    // Read a file and return true if it was written by us
    // (search for app signature in first 5 lines)
    static public boolean isSubDictFile(File f) {
        try {
            InputStreamReader in= new InputStreamReader(FileManager.getUnicodeFileContents(f));
            try (BufferedReader br = new BufferedReader(new BufferedReader(in))) {
                String line;
                int iLine = 0;
                while ((line = br.readLine()) != null && iLine < 5) {
                    if(line.startsWith(";"+AppConst.APP_SIGNATURE)) return true;
                    iLine++;
                }
            }
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private String[] supportedExtensions;
    private AppEventListener evtListener;

    WorkerSubFinder(String[] extensions, AppEventListener listener) {
        supportedExtensions = extensions;
        evtListener = listener;
    }

    // Return an iterator on files in the current directory and its children(recursive)
    public Collection<File> listCurrentDirFiles(String[] extensions) {

        File pathObj = new File(System.getProperty("user.dir"));
        if(!pathObj.isDirectory()) {
            System.out.println("Error while reading current directory");
            System.exit(1);
        }
        return FileUtils.listFiles(pathObj, extensions, true);
    }

    @Override
    public SubtitlesCollection doInBackground() throws Exception {
        if( SwingUtilities.isEventDispatchThread() ) throw new Exception("FileFinder should not run on the EDT thread!");

        // Read all subtitles files from current directory
        // Look for subtitles we can process
        SubtitlesCollection coll = new SubtitlesCollection();
        for (File fileEntry : listCurrentDirFiles(supportedExtensions)) {
            if( !fileEntry.isHidden() ) {
                coll.canBeAnnotated.add(fileEntry.getAbsolutePath());
                System.out.println("Found " + fileEntry.getName());
            }
        }
        // Look for subtitles we already processed
        for (File fileEntry : listCurrentDirFiles(new String[] {AppConst.OUTPUT_SUB_EXT})) {
            if( !fileEntry.isHidden() && isSubDictFile(fileEntry)) {
                coll.wasAnnotated.add(fileEntry.getAbsolutePath());
            }
        }

        if( coll.isEmpty() ) System.out.println("No subtitle found in this directory.");
        return coll;
    }

    @Override
    protected void done() {
        try {
            evtListener.onAppEvent(AppEvent.SEARCHING_SUBTITLES_END, get());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }
    }
}

